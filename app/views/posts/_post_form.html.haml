#post_field
  =form_for post, html:{remote: true} do |f|
    =text_area_tag :query, params[:query], id: "post_form", class: 'form-control action-input', placeholder: 'What actions did you take today?', name:"post[content]", rows: 3
    #post_div{:contenteditable => "", class: 'form-control action-input'}
    -post.assets.build unless post.assets.first

    #fileUpload.fileUpload.btn{style: "display:none;"}
      %span Drag File Here Or Click
      = f.fields_for :assets do |images_form|
        = images_form.file_field :image, type:"file", class: "upload"
    %img#preview_upload.hidden.row
    #temp_elements.hidden
    #hidden_fields.hidden
    /search--if found, log tag_id. if NOT found, create new tag, log new_tag_id
    /on post submission, create tagging and create post
    = button_tag "Post", class: 'btn btn-default'
    %a{href:"#"}
      %span.glyphicon.glyphicon-picture.open-fileUpload

:css
    #post_div {
      overflow: scroll;
      border: 1px solid #ccc;
      width: 710px;
      height: 74px;
    }

    #post_div span,
    #post_div a {
      font-size: 14px;
      font-weight: normal;
    }

    .post_actionable {
      color: #d1ab2b;
    }

    .typeahead.dropdown-menu {
      width: 710px;
    }

:javascript
    
    var types = {};
    var labels = []; 

    $(function(){
      $('#post_div').on('input', function(e) {
          parse_post();
      }).trigger('input');

      $('div#post_div').tagautocomplete({
        source: function (query, process) {
          var min_term_length = 2;
          var position = getCaretPosition(this.$element[0]);
          var term = query.substring(0, position);
          var regex = new RegExp("(^|\\s)((" + this.options.character + ")[\\w-]*)$");
          var result = regex.exec(term);
          if(result && result[2] && result[2].length > min_term_length)
              query = result[2].trim().toLowerCase().replace(/^(@|#|!!|\/\/)/,'');
          else
              return false;
          return $.get('/posts/suggestions', { query: query}, function (data) {
            // reset containers
            types = {};
            labels = [];

            $(data).each(function(ind, val){
              types[val['item']] = {'type':val['type'], 'id':val['id']}
              labels.push(val['item'])
            })

            return process(labels); 
          }, 'JSON');
        },
        minLength: 2,
        items: 5,
        updater: function(item){
          
          var formatted_item = '<a href="javascript:void;" class="post-anchor post_actionable" data-id="'+types[item]['id']+'" data-type="'+types[item]['type']+'">'+item+'</a>';
          //$('#post_div').append(formatted_item);
          
          //add_hidden_field(item, types[item]['id'], types[item]['type']);
          
          //setTimeout(function(){
          //  add_existing(item, types[item]['id'], types[item]['type']);
          //}, 1000);

          //return item+' ';
          return formatted_item;
        },
        character: '@|#|//|!!', //accept both @ and #
        after: function () {
          parse_post();
        } //to run after selection  
      });

      $('#new_post').submit(function() {

        var html = $('#post_div').html();
//        $('#temp_elements').append(html);
//
//        var knowns = $('#temp_elements').find('a');
//        var known_array = [];
//        $(knowns).each(function(ind, el){
//          var known_id = $(el).attr('data-id');
//          var known_type = $(el).attr('data-type');
//          var known_val = $(el).text();
//
//          var known_json = {'id': known_id, 'type': known_type, 'val': known_val};
//          known_array.push(known_json);
//        })
//
//        var $known_hidden = $("<input type='hidden' name='known'/>");
//        $known_hidden.val(JSON.stringify({'known_array':known_array}));
//        $('#hidden_fields').append($known_hidden);
//
//        var unknowns = $('#temp_elements').find('span');
//        var unknown_array = [];
//        $(unknowns).each(function(ind, el){
//          var unknown_type = $(el).attr('data-type');
//          var unknown_val = $(el).text();
//
//          var unknown_json = {'type': unknown_type, 'val': unknown_val};
//          unknown_array.push(unknown_json);
//        })
//
//        var $unknown_hidden = $("<input type='hidden' name='unknown'/>");
//        $unknown_hidden.val(JSON.stringify({'unknown_array':unknown_array}));
//        $('#hidden_fields').append($unknown_hidden);

        var $formatted_post = $("<input type='hidden' name='formatted_post'/>");
        $formatted_post.val(html);
        $('#hidden_fields').append($formatted_post);

        //$('#temp_elements').empty();

        return true;
      });
    })

    function parse_post(){
      if($('#post_div').html() != ""){
        var post = stripped_post($('#post_div').html());
        var matching_post = strip_anchors(post);
        var hash_matches = matching_post.match(/#\w+\s*/g);
        if(hash_matches != null){
          hash_matches = unique(hash_matches);
          $(hash_matches).each(function(ind,val){
            var regexp = new RegExp(val, 'g');
            post = post.replace(regexp, '<span class="post_actionable" data-type="tag">'+val.trim()+'</span>');
          })
          $('#post_div').html(post);
        }
        var bang_matches = matching_post.match(/!!\w+\s*/g);
        if(bang_matches != null){
          bang_matches = unique(bang_matches);
          $(bang_matches).each(function(ind,val){
            var regexp = new RegExp(val, 'g');
            post = post.replace(regexp, '<span class="post_actionable" data-type="action">'+val.trim()+'</span>');
          })
          $('#post_div').html(post);
        }
        var at_matches = matching_post.match(/@\w+\s*/g);
        if(at_matches != null){
          at_matches = unique(at_matches);
          $(at_matches).each(function(ind,val){
            var regexp = new RegExp(val, 'g');
            post = post.replace(regexp, '<span class="post_actionable" data-type="username">'+val.trim()+'</span>');
          })
          $('#post_div').html(post);
        }
        var list_matches = matching_post.match(/\/\/\w+\s*/g);
        if(list_matches != null){
          list_matches = unique(list_matches);
          $(list_matches).each(function(ind,val){
            var regexp = new RegExp(val, 'g');
            post = post.replace(regexp, '<span class="post_actionable" data-type="list">'+val.trim()+'</span>');
          })
          $('#post_div').html(post);
        }
        placeCaretAtEnd( document.getElementById('post_div') );
      }
    }

    function stripped_post(current){
      var regexp   = new RegExp('<span class="post_actionable" data-type="tag">|<span class="post_actionable" data-type="action">|<span class="post_actionable" data-type="username">|<span class="post_actionable" data-type="list">', 'g');
      var stripped = current.replace(regexp, '');
      var regexp   = new RegExp('</span>', 'g');
      stripped     = stripped.replace(regexp, '');
      return stripped;
    }

    function strip_anchors(current){
      var regexp = new RegExp('<a(.*)a>', 'g');
      var stripped = current.replace(regexp, '');
      return stripped;
    }

    function placeCaretAtEnd(el) {
      el.focus();
      if (typeof window.getSelection != "undefined"
              && typeof document.createRange != "undefined") {
          var range = document.createRange();
          range.selectNodeContents(el);
          range.collapse(false);
          var sel = window.getSelection();
          sel.removeAllRanges();
          sel.addRange(range);
      } else if (typeof document.body.createTextRange != "undefined") {
          var textRange = document.body.createTextRange();
          textRange.moveToElementText(el);
          textRange.collapse(false);
          textRange.select();
      }
    }

    function unique(array) {
       return $.grep(array, function(el, index) {
           return index === $.inArray(el, array);
       });
    }

    //function add_existing(item, id, type){
    //  var formatted_item = '<span class="post_actionable" data-id="'+id+'" data-type="'+type+'">'+item+'</span>';
    //}

    // function add_hidden_field(item, id, type){
    //   $('<input>', {
    //     name: "post[new_" + obj_type + "_titles][]",
    //     value: penultimate_element,
    //     type: "hidden",
    //     multiple: "multiple",
    //     id: "new_post_" + obj_type + "_titles"
    //   }).appendTo("#hidden_fields");
    // }